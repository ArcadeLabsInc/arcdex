<?php

use App\Models\Nonce;
use Illuminate\Validation\ValidationException;

// App will request a nonce from the API via POST /nonce, passing in pubkey and device_name
// API will generate a nonce and store it in the database
// API will return the nonce to the app
// App will generate a proof by signing the nonce with the private key associated with the pubkey
// App will send the proof, pubkey, and device_name to the API via POST /login
// API will validate the proof was generated by the private key associated with the pubkey
// API will return a token to the app
// App will store the token in local storage
// App will send the token in the Authorization header for all subsequent requests



// App will request a nonce from the API via POST /api/nonce, passing in pubkey and device_name
// LoginController@nonce creates nonce, saves to nonces table with timestamps and pubkey and device_name, returns nonce to the app
test('app can request a nonce', function () {
    $response = $this->post('/api/nonce', [
        'pubkey' => '987612984762893476234',
        'device_name' => 'test device',
    ]);

    $response->assertStatus(200)
        ->assertJsonStructure(['nonce']);

    $nonce = $response->json('nonce');
    expect($response->json('nonce'))->toBeString();

    // check that the nonce is in the database, associated with the pubkey and device_name and that nonce is recent
    $this->assertDatabaseHas('nonces', [
        'pubkey' => '987612984762893476234',
        'device_name' => 'test device',
        'nonce' => $nonce,
    ]);

    // Check that the nonce is in the database, associated with the pubkey and device_name, and that it is recent
    $nonceRow = Nonce::where([
        'pubkey' => '987612984762893476234',
        'device_name' => 'test device',
        'nonce' => $nonce,
    ])->first();

    expect($nonceRow)->not->toBeNull();
});

test('nonce request without pubkey fails', function () {
    $this->withoutExceptionHandling();
    $this->expectException(ValidationException::class);

    $this->post('/api/nonce', [
        'device_name' => 'test device',
    ]);
});

test('nonce request without device_name fails', function () {
    $this->withoutExceptionHandling();
    $this->expectException(ValidationException::class);

    $this->post('/api/nonce', [
        'pubkey' => 'asoidfjoasidjfisjsdf',
    ]);
});


test('user can log in via api', function () {
    $this->withoutExceptionHandling();

    // assert there are no personal access tokens in database
    $this->assertDatabaseCount('personal_access_tokens', 0);

    $response = $this->post('/api/login', [
        'pubkey' => 'askdfjhaksdjfhkasjdhfkjsadhf',
        'device_name' => 'test device',
        'proof' => 'f23f23f23f23f23f23f23f',
        'nonce' => 'asdofsodifjo2i3jfo2'
    ]);

    // assert that a string token was returned
    $token = $response->json('token');
    expect($token)->toBeString();

    // assert that a new token was created in the database
    $this->assertDatabaseCount('personal_access_tokens', 1);

    $response->assertStatus(200)
        ->assertJsonStructure(['token']);
});

test('login request without pubkey fails', function () {
    $this->withoutExceptionHandling();
    $this->expectException(ValidationException::class);

    $this->post('/api/login', [
        'device_name' => 'test device',
        'proof' => 'f23f23f23f23f23f23f23f',
        'nonce' => 'asdofsodifjo2i3jfo2'
    ]);
});

test('login request without nonce fails', function () {
    $this->withoutExceptionHandling();
    $this->expectException(ValidationException::class);

    $this->post('/api/login', [
        'pubkey' => 'askdfjhaksdjfhkasjdhfkjsadhf',
        'device_name' => 'test device',
        'proof' => 'f23f23f23f23f23f23f23f',
    ]);
});

test('login request without device_name fails', function () {
    $this->withoutExceptionHandling();
    $this->expectException(ValidationException::class);

    $this->post('/api/login', [
        'pubkey' => 'askdfjhaksdjfhkasjdhfkjsadhf',
        'proof' => 'f23f23f23f23f23f23f23f',
        'nonce' => 'asdofsodifjo2i3jfo2'
    ]);
});

test('login request without proof fails', function () {
    $this->withoutExceptionHandling();
    $this->expectException(ValidationException::class);

    $this->post('/api/login', [
        'pubkey' => 'askdfjhaksdjfhkasjdhfkjsadhf',
        'device_name' => 'test device',
        'nonce' => 'asdofsodifjo2i3jfo2'
    ]);
});
